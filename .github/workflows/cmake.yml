name: C/C++ CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.spec.name }}
    runs-on: ${{ matrix.spec.runner }}
    env:
      BUILD_NUMBER: ${{ github.run_number }}
    strategy:
      fail-fast: false
      matrix:
        spec:
          - { name: 'Linux x86_64', runner: 'ubuntu-20.04', target: 'linux-x64', test: 'true' }
          - { name: 'Linux ARM', runner: 'ubuntu-20.04', target: 'linux-arm' }
          - { name: 'Linux ARM64', runner: 'ubuntu-20.04', target: 'linux-arm64' }
          - { name: 'MacOS x86_64', runner: 'macOS-11', target: 'macOS-x64', test: 'true' }
          - { name: 'MacOS arm64', runner: 'macOS-11', target: 'macOS-arm64' }
          - { name: 'Windows x86_64', runner: 'windows-2022', target: 'windows-x64', test: 'true' }
          - { name: 'Windows ARM64', runner: 'windows-2022', target: 'windows-arm64' }
    steps:
      - name: Install Crossbuild tools
        if: startsWith(matrix.spec.runner, 'ubuntu')
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: crossbuild-essential-armhf crossbuild-essential-arm64
          version: 1.0

      - name: Add msbuild to PATH
        if: startsWith(matrix.spec.runner, 'windows')
        uses: microsoft/setup-msbuild@v1.1

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: run build for ${{ matrix.spec.target }}
        uses: ./.github/actions/build
        with:
          target: ${{ matrix.spec.target }}
          test: ${{ matrix.spec.test }}
          test_id: ${{ secrets.ZITI_TEST_IDENTITY }}

#      - uses: lukka/get-cmake@latest
#
#      - uses: lukka/run-vcpkg@v10
#        with:
#          vcpkgGitCommitId: '19af97cba8ca48474e4ad15a24ed50271a9ecdac'
      #
      #      - uses: lukka/run-cmake@v10
      #        name: Configure CMake
      #        with:
      #          configurePreset: ${{ matrix.spec.preset }}
      #          configurePresetAdditionalArgs: "[ `-B`, `./build` ]"
      #
      #      - name: build CMake
      #        run: cmake --build ./build

      #      - name: test
      #        if: matrix.spec.no_tests != 'true'
      #        working-directory: ./build
      #        run: ctest -VV --no-compress-output -R quick_tests
      #
      #      - name: integration tests
      #        env:
      #          TEST_ID: ${{ secrets.ZITI_TEST_IDENTITY }}
      #          ZITI_TEST_IDENTITY: ${{ runner.workspace }}/test_id.json
      #          ZITI_LOG: 4
      #        if: matrix.spec.no_tests != 'true' && env.TEST_ID != ''
      #        working-directory: ./build
      #        shell: bash
      #        run: |
      #          echo "${TEST_ID}" > "${ZITI_TEST_IDENTITY}"
      #          ctest -VV --no-compress-output -R zitilib_tests

      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ziti-prox-c-${{ matrix.spec.target }}
          path: ./build/programs/ziti-prox-c/**/ziti-prox-c*.zip
      - name: upload SDK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ziti-sdk-${{ matrix.spec.target }}
          path: ./build/package/ziti-sdk-*
