set(ZITI_HEADER_FILES 
    ${PROJECT_SOURCE_DIR}/includes/nf/errors.h 
    ${PROJECT_SOURCE_DIR}/includes/nf/ziti.h
)

SET(ZITI_SRC_FILES
        utils.c strutils.h
        ziti.c
        config.c
        errors.c
        ziti_ctrl.c
        model.c
        ziti_model.c
        connect.c
        channel.c
        message.c
        buffer.c
)

SET(ZITI_PRIVATE_SRC_FILES 
    ${PROJECT_SOURCE_DIR}/deps/http-parser/http_parser.c
)

SET(ZITI_INCLUDE_DIRS
    PUBLIC ../includes
    PUBLIC ${PROJECT_SOURCE_DIR}/deps/http-parser

    PRIVATE ../inc_internal
    PRIVATE ${PROJECT_BINARY_DIR}/include
    PRIVATE ${PROJECT_SOURCE_DIR}/deps/mjson
)

add_library(ziti     STATIC ${ZITI_SRC_FILES} ${ZITI_HEADER_FILES} )
set_target_properties(ziti PROPERTIES OUTPUT_NAME "ziti")
add_library(ziti_shared SHARED ${ZITI_SRC_FILES} ${ZITI_HEADER_FILES} )
set_target_properties(ziti_shared PROPERTIES OUTPUT_NAME "ziti")
set_property(TARGET ziti ziti_shared PROPERTY C_STANDARD 11)

target_sources(ziti     PRIVATE ${ZITI_PRIVATE_SRC_FILES})
target_sources(ziti_shared PRIVATE ${ZITI_PRIVATE_SRC_FILES})

target_link_libraries(ziti     PUBLIC uv_mbed)
target_link_libraries(ziti_shared PUBLIC uv_mbed)
        
if (NOT WIN32)
    target_link_libraries(ziti     PUBLIC m )
    target_link_libraries(ziti_shared PUBLIC m )
endif()

target_include_directories(ziti     ${ZITI_INCLUDE_DIRS})
target_include_directories(ziti_shared ${ZITI_INCLUDE_DIRS})

target_compile_definitions(ziti PUBLIC
        ZITI_BUILDNUM=${ZITI_BUILDNUM}
        BUILD_DATE=${BUILD_DATE}
        ZITI_VERSION=${PROJECT_VERSION}
        ZITI_BRANCH=${GIT_BRANCH}
        ZITI_COMMIT=${GIT_COMMIT_HASH}
)

target_compile_definitions(ziti_shared PUBLIC
        ZITI_BUILDNUM=${ZITI_BUILDNUM}
        BUILD_DATE=${BUILD_DATE}
        ZITI_VERSION=${PROJECT_VERSION}
        ZITI_BRANCH=${GIT_BRANCH}
        ZITI_COMMIT=${GIT_COMMIT_HASH}
        INTERFACE USING_ZITI_SHARED=1
        PRIVATE BUILDING_ZITI_SHARED=1
)

if (WIN32)
    # on windows GDI defines ERROR which conflicts with the SDK declaration of DEBUG_LEVELS in utils.h
    target_compile_definitions(ziti     PUBLIC NOGDI _CRT_NONSTDC_NO_DEPRECATE)
    target_compile_definitions(ziti_shared PUBLIC NOGDI _CRT_NONSTDC_NO_DEPRECATE)
    
    target_link_libraries(ziti     PUBLIC crypt32)
    target_link_libraries(ziti_shared PUBLIC crypt32)
endif()

set(includedir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR})
set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
set(prefix ${CMAKE_INSTALL_PREFIX})

configure_file(${PROJECT_SOURCE_DIR}/ziti.pc.in ${CMAKE_CURRENT_BINARY_DIR}/ziti.pc @ONLY)

set(CMAKE_INSTALL_DOCDIR share/doc)

install(TARGETS ziti ziti_shared
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        )

install(DIRECTORY ${CMAKE_SOURCE_DIR}/includes/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(FILES ${CMAKE_SOURCE_DIR}/deps/http-parser/LICENSE-MIT DESTINATION ${CMAKE_INSTALL_DOCDIR}/http-parser)
install(FILES ${CMAKE_SOURCE_DIR}/deps/mjson/LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}/mjson)
install(FILES ${CMAKE_SOURCE_DIR}/deps/uv-mbed/deps/mbedtls/LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}/mbedtls)
install(FILES ${CMAKE_SOURCE_DIR}/deps/uv-mbed/deps/uv_link_t/README.md DESTINATION ${CMAKE_INSTALL_DOCDIR}/uv_link_t)
install(FILES ${CMAKE_SOURCE_DIR}/deps/uv-mbed/deps/mbedtls/crypto/LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}/mbedtls/crypto)
install(FILES ${CMAKE_SOURCE_DIR}/deps/uv-mbed/LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR}/uv_mbed)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ziti.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

